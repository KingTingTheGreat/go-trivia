package templates

templ Control() {
	<main class="flex flex-col items-center p-2">
		<h1>Control Panel</h1>
		<div>
			<h4>Password</h4>
			<input class="m-1 p-1 border-2 border-black" type="password" placeholder="Password" id="password"/>
			<p id="password-error" style="color:red; font-size:0.8rem; opacity:0;">Invalid Password</p>
		</div>
		<h4 class="p-2 m-1">Question #<span id="qnum"></span></h4>
		<div class="flex flex-col sm:flex-row">
			<div class="flex flex-col m-2 p-3">
				<h4>Update User Score</h4>
				<select class="border-2 border-black p-1" name="players" id="players" onchange="zeroAmount()"></select>
				<input class="border-2 border-black p-1" type="number" id="amount" placeholder="Amount" value="0"/>
				<button onclick="updatePlayers()">Refresh Players</button>
				<button onclick="updateUserScore()">Update Score</button>
			</div>
			<div class="flex flex-col m-2 p-3">
				<h4>Question Controls</h4>
				<div class="flex w-full">
					<button class="cursor-pointer flex-1 m-2 p-2 w-fit bg-rose-200" onclick="prev()">Prev</button>
					<button class="cursor-pointer flex-1 m-2 p-2 w-fit bg-green-300" onclick="next()">Next</button>
				</div>
				<button class="cursor-pointer m-2 p-2 w-fit bg-stone-300 flex-1" onclick="resetBuzzers()">Reset Buzzers</button>
			</div>
		</div>
		@Leaderboard()
		<div class="flex flex-col">
			<h4>Remove Player</h4>
			<select class="border-2 border-black p-1" name="players" id="remove-players"></select>
			<button class="border-2 border-black p-1" onclick="removePlayer()">Remove Player</button>
		</div>
	</main>
	<script>
        fetch('/question-number').then(response => response.text()).then(data => {
            questionNum = Number(data);
            if (!isNaN(questionNum)) {
                document.getElementById('qnum').innerText = questionNum;
            }
        });
        function updatePlayers() {
            fetch('/players').then(response => response.json()).then(data => {
                const players = data;
                const select = document.getElementById('players');
                const removeSelect = document.getElementById('remove-players');
                select.replaceChildren();
                removeSelect.replaceChildren();
                for (let i = 0; i < players.length; i++) {
                    const option = document.createElement('option');
                    option.value = players[i];
                    option.innerText = players[i];
                    select.appendChild(option);

                    const removeOption = document.createElement('option');
                    removeOption.value = players[i];
                    removeOption.innerText = players[i];
                    removeSelect.appendChild(removeOption);
                }
            });
        }
        updatePlayers();
        function zeroAmount() {
            document.getElementById('amount').value = 0;
        }

        function updateUserScore() {
            document.getElementById('password-error').style.opacity = 0;
            const password = document.getElementById('password').value;
            const name = document.getElementById('players').value;
            const amount = document.getElementById('amount').value;
            fetch('/update-score', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: name,
                    amount: amount,
                    password: password
                })
            }).then(response => response.status).then(data => {
                if (data !== 200) {
                    document.getElementById('password-error').style.opacity = 1;
                }
            });
            zeroAmount();
        }

        function postBackend(route) {
            document.getElementById('password-error').style.opacity = 0;
            fetch(route, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    password: document.getElementById('password').value
                })
            }).then(response => {
                if (response.status === 200) {
                    return route !== 'clear' ?response.text() : NaN;
                } else {
                    document.getElementById('password-error').style.opacity = 1;
                    return NaN
                }
            }).then(data => {
                questionNum = Number(data);
                if (!isNaN(questionNum)) {
                    document.getElementById('qnum').innerText = questionNum;
                }
            });
        }
        function resetBuzzers() {
            postBackend('/clear');
        }
        function next() {
            postBackend('/next');
        }
        function prev() {
            postBackend('/prev');
        }

        function removePlayer() {
            document.getElementById('password-error').style.opacity = 0;
            const name = document.getElementById('remove-players').value;
            fetch('/player', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: name,
                    password: document.getElementById('password').value
                })
            }).then(response => response.status).then(data => {
                if (data === 200) {
                    updatePlayers();
                } else {
                    document.getElementById('password-error').style.opacity = 1;
                }
            });
            updatePlayers();
        }   
    </script>
}
