package templates

templ Control() {
    <main style="display:flex; flex-direction:column; align-items:center">
        <h1>Control Panel</h1>

        <div>
            <h4>Password</h4>
            <input style="padding:0.25rem; margin:0.25rem;" type="password" placeholder="Password" id="password" />
            <p id="password-error" style="color:red; font-size:0.8rem; opacity:0;">Invalid Password</p>
        </div>

        <h4 style="padding:0.5rem; margin:0.25rem;">Question #<span id="qnum"></span></h4>

        <div style="display:flex;" id="control-box">
            <div style="display:flex; flex-direction:column; margin:0.5rem; padding:0.75rem;">
                <h4>Update User Score</h4>
                <select name="players" id="players" onchange="zeroAmount()">
                </select>
                <input type="number" id="amount" placeholder="Amount" value="0" />
                <button onclick="updatePlayers()">Refresh Players</button>
                <button onclick="updateUserScore()">Update Score</button>
            </div>
            <div style="display:flex; flex-direction:column; margin:0.5rem; padding:0.75rem;">
                <h4>Question Controls</h4>
                <div style="display:flex; width:100%;">
                    <button style="cursor:pointer; flex:1; margin:0.5rem; padding:0.5rem; width:fit; background-color:pink" onclick="prev()">Prev</button>
                    <button style="cursor:pointer; flex:1; margin:0.5rem; padding:0.5rem; width:fit; background-color:lightgreen" onclick="next()">Next</button>
                </div>
                <button style="cursor:pointer; flex:1; margin:0.5rem; padding:0.5rem; width:fit; background-color:lightgray" onclick="resetBuzzers()">Reset Buzzers</button>
            </div>
        </div>
        @Leaderboard()
    </main>
    <script>
        fetch('/question-number').then(response => response.text()).then(data => {
            questionNum = Number(data);
            if (!isNaN(questionNum)) {
                document.getElementById('qnum').innerText = questionNum;
            }
        });
        function updatePlayers() {
            fetch('/players').then(response => response.json()).then(data => {
                const players = data;
                const select = document.getElementById('players');
                select.replaceChildren();
                for (let i = 0; i < players.length; i++) {
                    const option = document.createElement('option');
                    option.value = players[i];
                    option.innerText = players[i];
                    select.appendChild(option);
                }
            });
        }
        updatePlayers();
        function zeroAmount() {
            document.getElementById('amount').value = 0;
        }

        function updateUserScore() {
            document.getElementById('password-error').style.opacity = 0;
            const password = document.getElementById('password').value;
            const name = document.getElementById('players').value;
            const amount = document.getElementById('amount').value;
            fetch('/update-score', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: name,
                    amount: amount,
                    password: password
                })
            }).then(response => response.status).then(data => {
                if (data !== 200) {
                    document.getElementById('password-error').style.opacity = 1;
                }
            });
            zeroAmount();
        }

        function postBackend(route) {
            document.getElementById('password-error').style.opacity = 0;
            fetch(route, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    password: document.getElementById('password').value
                })
            }).then(response => {
                if (response.status === 200) {
                    return route !== 'clear' ?response.text() : NaN;
                } else {
                    document.getElementById('password-error').style.opacity = 1;
                    return NaN
                }
            }).then(data => {
                questionNum = Number(data);
                if (!isNaN(questionNum)) {
                    document.getElementById('qnum').innerText = questionNum;
                }
            });
        }
        function resetBuzzers() {
            postBackend('/clear');
        }
        function next() {
            postBackend('/next');
        }
        function prev() {
            postBackend('/prev');
        }
    </script>
}